{"version":3,"file":"static/js/313.75517ac2.chunk.js","mappings":"sKAKA,MAwDA,EAxDiBA,KACb,MAAMC,GAAWC,EAAAA,EAAAA,OACX,SAAEC,EAAQ,KAAEC,IAASC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,YAEjDC,EAASC,IAAcC,EAAAA,EAAAA,UAASN,IAChCO,EAAaC,IAAkBF,EAAAA,EAAAA,UAASP,GAwB/C,OACIU,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBACJF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SAAOC,QAAQ,OAAMF,SAAC,eACtBC,EAAAA,EAAAA,KAAA,SACIE,KAAK,OACLC,GAAG,OACHC,MAAOZ,EACPa,SA/BUC,IAEtBb,EAAWa,EAAEC,OAAOH,MAAM,EA8BdI,YAAY,2BAGpBX,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SAAOC,QAAQ,QAAOF,SAAC,gBACvBC,EAAAA,EAAAA,KAAA,SACIE,KAAK,QACLC,GAAG,QACHC,MAAOT,EACPU,SApCWC,IAEvBV,EAAeU,EAAEC,OAAOH,MAAM,QAqC1BJ,EAAAA,EAAAA,KAAA,UAAQS,QAlCUC,KAEtBzB,ECvBmBO,KAAO,CAC9BU,KAAM,cACNS,QAASnB,IDqBIoB,CAAWpB,IACpBP,ECnBuBU,KAAW,CACtCO,KAAM,mBACNS,QAAShB,IDiBIkB,CAAelB,IAMxBmB,MAAM,+BAA+B,EAyBEf,SAAC,mBAClC,C","sources":["components/pages/settings/Settings.jsx","redux/actions/settingsActions.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateLogo, updateAppColor } from '../../../redux/actions//settingsActions';\nimport './Settings.scss';\n\nconst Settings = () => {\n    const dispatch = useDispatch();\n    const { appColor, logo } = useSelector((state) => state.settings);\n\n    const [newLogo, setNewLogo] = useState(logo);\n    const [newAppColor, setNewAppColor] = useState(appColor);\n\n    const handleLogoChange = (e) => {\n        // Update local state\n        setNewLogo(e.target.value);\n    };\n\n    const handleColorChange = (e) => {\n        // Update local state\n        setNewAppColor(e.target.value);\n    };\n\n    const handleSaveChanges = () => {\n        // Dispatch actions to update global state\n        dispatch(updateLogo(newLogo));\n        dispatch(updateAppColor(newAppColor));\n\n        // You can also save the changes to a backend or localStorage\n        // ...\n\n        // Optionally, provide user feedback (e.g., success message)\n        alert('Settings saved successfully!');\n    };\n\n    return (\n        <div className=\"settings-container\">\n            <h2>App Settings</h2>\n            <div>\n                <label htmlFor=\"logo\">App Logo:</label>\n                <input\n                    type=\"text\"\n                    id=\"logo\"\n                    value={newLogo}\n                    onChange={handleLogoChange}\n                    placeholder=\"Enter new logo URL\"\n                />\n            </div>\n            <div>\n                <label htmlFor=\"color\">App Color:</label>\n                <input\n                    type=\"color\"\n                    id=\"color\"\n                    value={newAppColor}\n                    onChange={handleColorChange}\n                />\n            </div>\n            <button onClick={handleSaveChanges}>Save Changes</button>\n        </div>\n    )\n};\n\nexport default Settings;\n","// settingsActions.js\nexport const updateLogo = (newLogo) => ({\n    type: 'UPDATE_LOGO',\n    payload: newLogo,\n});\n\nexport const updateAppColor = (newAppColor) => ({\n    type: 'UPDATE_APP_COLOR',\n    payload: newAppColor,\n});\n"],"names":["Settings","dispatch","useDispatch","appColor","logo","useSelector","state","settings","newLogo","setNewLogo","useState","newAppColor","setNewAppColor","_jsxs","className","children","_jsx","htmlFor","type","id","value","onChange","e","target","placeholder","onClick","handleSaveChanges","payload","updateLogo","updateAppColor","alert"],"sourceRoot":""}